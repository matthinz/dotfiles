#!/usr/bin/env bash

set -euo pipefail

function make_file {
  FILE=${1}

  if [ -f "$FILE" ]; then
    echo "$FILE already exists." >&2
    return
  fi

  echo "Creating $FILE..." >&2

  DIR=$(dirname "${FILE}")
  if [ ! -d "$DIR" ]; then
    mkdir -p "$DIR"
  fi

  cat > $FILE
}

PROJECT_NAME=${1:-$(basename $(pwd))}

if [ $(basename $(pwd)) != "$PROJECT_NAME" ]; then
  if [ -d "$PROJECT_NAME" ]; then
    echo "$PROJECT_NAME directory exists. Using that..."
  else
    mkdir "$PROJECT_NAME"
  fi
  cd "$PROJECT_NAME"
fi

DESIRED_NODE_VERSION=$(asdf nodejs resolve lts --latest-available)
ACTUAL_NODE_VERSION=$(node --version)

if [ "${DESIRED_NODE_VERSION}" != "${ACTUAL_NODE_VERSION}" ]; then
  echo "Installing Node ${DESIRED_NODE_VERSION}..."
  asdf install nodejs ${DESIRED_NODE_VERSION}
fi

make_file .nvmrc <<END
${DESIRED_NODE_VERSION}

END

make_file package.json <<END
{
  "name": "$PROJECT_NAME",
  "version": "0.0.1",
  "main": "dist/index.js",
  "bin": {
    "${PROJECT_NAME}": "dist/cli.js"
  },
  "engines": {
    "node": "^${DESIRED_NODE_VERSION}"
  },
  "license": "CC0-1.0",
  "scripts": {
    "build": "tsc",
    "clean": "rm -rf dist",
    "format": "prettier --write **/*",
    "start": "node --enable-source-maps dist/cli.js",
    "test": "yarn build && jest"
  },
  "jest": {
    "roots": [
      "dist"
    ]
  }
}

END

yarn add --dev \
  jest \
  prettier \
  prettier-plugin-organize-imports \
  typescript \
  @tsconfig/recommended \
  @types/jest \
  @types/node

if [ ! -d .git ]; then
  git init
fi

make_file .vscode/settings.json <<END
{
  "[javascript]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  }
}

END

make_file .editorconfig <<END
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 2
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[Makefile]
indent_style = tab

END

make_file .gitignore <<END
*.d.ts
*.js
*.js.map

*.tsbuildinfo

*.orig

node_modules

.DS_Store

END

make_file tsconfig.json <<END
{
  "extends": "@tsconfig/recommended/tsconfig.json",
  "compilerOptions": {
    "incremental": true,
    "outDir": "dist",
    "sourceMap": true,
    "declaration": true
  },
  "include": [
    "src/**/*.ts"
  ]
}

END

make_file .prettierrc.json <<END
{
  "plugins": ["prettier-plugin-organize-imports"]
}
END

make_file README.md <<END
# ${PROJECT_NAME}

END

make_file 'src/index.ts' <<END

export async function run(args: string[]) {
  console.log("Hello world!")
}

END

make_file 'src/index.test.ts' <<END
import { afterEach, describe, it, jest } from "@jest/globals";
import { run } from ".";

describe("#run", () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  it("outputs to the console", async () => {
    const consoleLogSpy = jest.spyOn(console, "log").mockImplementation(() => {});
    await run([]);
    expect(consoleLogSpy).toHaveBeenCalledWith("Hello world!");
  });
});

END

make_file 'src/cli.ts' <<END
import { run } from ".";

run(process.argv.slice(2)).catch(err => {
  process.exitCode = 1;
  console.error(err);
});

END

make_file 'src/types.ts' <<END
// Add global types here
END

yarn format

git add . && git commit -m "Initial commit"

code .
