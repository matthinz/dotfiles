#!/usr/bin/env ruby

require 'csv'
require 'io/console'
require 'open3'

if ENV['AWS_ACCESS_KEY_ID'].nil?
  "This command must be run with aws-vault."
  exit 1
end


IDP_ROOT = ENV['IDENTITY_IDP_ROOT'] || File.join(ENV['HOME'], 'Work', '18f', 'identity-idp')
DEVOPS_ROOT = ENV['IDENTITY_DEVOPS_ROOT'] || File.join(ENV['HOME'], 'Work', 'lg', 'identity-devops')

if !File.exist?(IDP_ROOT)
  warn "Could not find identity-idp. Set $IDENTITY_IDP_ROOT to the correct path."
  exit 1
end

if !File.exist?(DEVOPS_ROOT)
  warn "Could not find identity-devops. Set $IDENTITY_DEVOPS_ROOT to the correct path."
  exit 1
end

INVESTIGATOR = ENV['INVESTIGATOR'] ||
               ENV['GSA_USERNAME']&.gsub('.', ' ').gsub(/(\A|\s+)([a-z])/) { |match| match.upcase }

if INVESTIGATOR.nil?
  warn "Please set the INVESTIGATOR env to your name."
  exit 1
else
  warn "Identifying you as #{INVESTIGATOR.inspect}"
end

def build_cloudwatch_query_url(uuids)
  encoded_uuids = uuids.map { |u| "*27#{u}*27" }.join("*2c")

  fragment = if uuids.count == 1
     [
      "logsV2:logs-insights$3FqueryDetail$3D",
      "~(end~0~start~-259200~timeType~'RELATIVE~tz~'LOCAL~unit~'seconds~editorString~",
      "'fields*20name*2c*20properties.event_properties.success*20as*20success*2c*20*40timestamp*2c*20*40message*2c*20*40logStream*2c*20*40log*0a*7c*20",
      "filter*20properties.user_id*20in*20*5b#{encoded_uuids}*5d*0a*7c*20sort*20*40timestamp*20asc*0a*7c*20limit*2010000~queryId~'5595a58e-0ab9-4145-bae7-e0f1932f81c7~source~(~'prod_*2fsrv*2fidp*2fshared*2flog*2fevents.log)~lang~'CWLI)"
    ]
  else
    [
      "logsV2:logs-insights$3FqueryDetail$3D",
      "~(end~0~start~-259200~timeType~'RELATIVE~tz~'LOCAL~unit~'seconds~editorString~",
      "'fields*20properties.user_id*20as*20uuid*2c*20name*2c*20properties.event_properties.success*20as*20success*2c*20*40timestamp*2c*20*40message*2c*20*40logStream*2c*20*40log*0a*7c*20",
      "filter*20uuid*20in*20*5b#{encoded_uuids}*5d*0a*7c*20sort*20uuid*2c*20*40timestamp*20asc*0a*7c*20limit*2010000~queryId~'5595a58e-0ab9-4145-bae7-e0f1932f81c7~source~(~'prod_*2fsrv*2fidp*2fshared*2flog*2fevents.log)~lang~'CWLI)"
    ]
  end

  "https://us-west-2.console.aws.amazon.com/cloudwatch/home?region=us-west-2##{fragment.join("")}"
end

def format_uuid_list(uuids:, uuid_to_sf_cases_map: {})
  if uuids.count == 1
    <<~END
      UUID: `#{sf_case_to_uuid_map.values.first}`
    END
  elsif uuids.count > 1
    list_items = uuids.sort.map do |uuid|
      cases = uuid_to_sf_cases_map[uuid]
      cases = " (#{cases.join(', ')})" if cases

      "- `#{uuid}`#{cases}"
    end

    <<~END
      UUIDS:
      #{list_items.join("\n")}
    END
  end
end

def is_sf_case?(arg)
  /\A\d+\z/.match?(arg)
end

def lookup_sf_case_uuids(sf_cases)
  current_dir = Dir.pwd
  Dir.chdir(DEVOPS_ROOT)

  stdout, stderr, status = Open3.capture3(
    'asdf',
    'exec',
    'ruby',
    'bin/salesforce-email-lookup',
    '--csv',
    *sf_cases
  )

  if status != 0
    warn <<~END
      salesforce-email-lookup call failed (status: #{status})

      #{stderr}
    END
  end

  rows = CSV.parse(stdout)
  headers = nil
  result = {}

  rows.each do |row|
    if headers.nil?
      headers = row
    else
      case_number = row[headers.find_index('case_number')]
      uuid = row[headers.find_index('uuid')]
      result[case_number] = uuid
    end
  end

  result
ensure
  Dir.chdir(current_dir)
end


uuids = Set.new
sf_cases = Set.new
uuid_to_sf_cases_map = {}
sf_case_to_uuid_map = nil

ARGV.each do |arg|
  if is_sf_case?(arg)
    sf_cases.add(arg)
  else
    uuids.add(arg)
  end
end

original_uuids = uuids.dup

if sf_cases.any?
  warn "Looking up #{sf_cases.length} case(s) in Salesforce..."

  sf_case_to_uuid_map = lookup_sf_case_uuids(sf_cases)

  sf_case_to_uuid_map.each do |case_number, uuid|
    uuids.add uuid
    uuid_to_sf_cases_map[uuid] ||= []
    uuid_to_sf_cases_map[uuid] << case_number
  end
end

warn ""

puts format_uuid_list(uuids:, uuid_to_sf_cases_map:)

warn <<~END

Actions:

(O)pen Cloudwatch query (default)
(C)opy above to clipboard
(L)og in to Cloudwatch
(Q)uit

END

loop do
  STDERR.write("\nChoice: ")
  chr = STDIN.getch

  chr = 'O' if chr.bytes == [13] # Enter
  chr = 'Q' if chr.bytes == [3] # Ctrl + C

  case chr
  when 'C', 'c'
    STDERR.write chr

    stdin, _, _ = Open3.popen3('pbcopy')

    stdin.write <<~END
      #{format_uuid_list(uuids:, uuid_to_sf_cases_map:)}

      [Cloudwatch link](#{build_cloudwatch_query_url(uuids)})
    END

    stdin.close

    warn <<~END

      Copied message to clipboard.
      (Remember, âŒ˜ + Shift + F to format in Slack)
    END

    sleep 2
  when 'O', 'o'
    STDERR.write chr
    warn "\nOpening Cloudwatch..."
    spawn('open', build_cloudwatch_query_url(uuids))
  when 'L', 'l'
    STDERR.write chr
    warn "\nLogging in to Cloudwatch"
    spawn("aws-vault login -d8h prod-analytics")
    sleep(3)
  when 'q', 'Q'
    warn "\nBye"
    exit
  # else
  #   warn chr.bytes.inspect
  end

end
